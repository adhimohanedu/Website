[
  {
    "objectID": "pc.html",
    "href": "pc.html",
    "title": "My Portfolio",
    "section": "",
    "text": "Projects and research:\n\nWearable Computing - Real-time GPS tracking system for vehicles and wearable devices, demonstrating practical application of acquired skills.\nDesign of smart systems - Toxic gas prediction in manholes.\nUndergraduate project- Prediction of poverty using satellite images\nMicroprocessor and Microcontrollers- Plant health monitoring system using IOT.\n\nCertifications:\n\nAWS Academy Graduate- AWS Academy Cloud Computing Foundations\nIndustrial Internship: 3D Models for Virtual Reality"
  },
  {
    "objectID": "about.html#about-me",
    "href": "about.html#about-me",
    "title": "My Portfolio",
    "section": "About me",
    "text": "About me\nHello! I’m Adhi Mohan, currently pursuing my Masters in Data Analytics Engineering at George Mason University in the USA. Born on August 20, 2001, I hold a Bachelor of Technology degree in Computer Science with a specialization in Internet of Things from VIT University, Vellore, India, where I achieved a percentage of 75.6. Fluent in English, French, Hindi, and Telugu, I possess a diverse skill set encompassing Python, R, machine learning techniques, Excel, SQL, software development life cycle, HTML, DBMS, and digital creation. Throughout my academic journey, I have contributed significantly as the Board Member and Design Head of the IEEE Nuclear Plasma Sciences and Society (NPSS) Club, and as a Core Member of the IEEE Club. Known for my swift learning abilities and adaptability to diverse work environments, I firmly believe in the values of honesty and hard work, considering them as the cornerstone of success. Welcome to my portfolio, where you can explore my projects and experiences in the field of data analytics and beyond!"
  },
  {
    "objectID": "midproject.html",
    "href": "midproject.html",
    "title": "My Portfolio",
    "section": "",
    "text": "#Group No: 8\nMembers:\nAdhi Mohan\nPothula Sai Padma Sriya\nVideo Link: https://youtu.be/xUQEC1YYm-8?feature=shared\n\nAbove is the Data Visualization from a Bad Graph representing the US Map with states in polygonal structures with Uninsured rates(percentages). The data visualization does not seem to clearly depict the interpretations from looking at the graph and also the state boundaries and the color coding are similar to each other which makes it difficult to analyze the visualization. Hence, we consider this as a Bad Graph.\nThe visualisation chosen had the following three main issues:\n\nIssue 1: Choice of visualisation style is attempting more of an aesthetic approach rather than a functional approach. The visualisation draws the viewers eye, but the choice to make it eye catching overpowers the meaning.\nIssue 2: The size of each data point is equal, even though the data is not.\nIssue 3: The colours used are not ideal for color blindness.\n\nGood Charts convey information. Great charts enable, inform and improve decision making. - Dante Vitagliano. Now, let’s reconstruct the above Bad Graph making it much easier to analyze the data in the visualization. Let us start with the Visualization of the US Map from map_data showing the states with accurate boundaries and the Percentage of Uninsured rates.\nHere, we use the following libraries - library(tidyverse), library(maps), library(ggrepel), library(dplyr) to get the Map from the map_data and plotting state renamed as region. The maps package contains a lot of outlines of continents, countries and states. The maps package comes with a plotting function, but we will opt to use a ggplot to plot the maps in the maps package. The ggrepel package in R simplifies the process of avoiding overlapped texts in the plots. The dplyr package is used for making data manipulation easier.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.0     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(maps)\n\n\nAttaching package: 'maps'\n\nThe following object is masked from 'package:purrr':\n\n    map\n\nlibrary(ggrepel)\nlibrary(dplyr)\n\n# Define the data\ndata &lt;- read.csv(\"/Users/adhimohan/Desktop/STAT/Stat dataset pro.csv\", fileEncoding = \"ISO-8859-1\")\n\n# Get US map data with state names\nus_map &lt;- map_data(\"state\")\n\ndata &lt;- data %&gt;%\n  rename(region = state)\n\ndata &lt;- data %&gt;%\n  mutate(region = tolower(region))\n\n# Merge data with us_map by region\nmap_data &lt;- left_join(us_map, data, by = \"region\")\nmap_data$uninsured_rates &lt;- gsub(\"%\", \"\", map_data$uninsured_rates)\nmap_data$uninsured_rates &lt;- as.numeric(map_data$uninsured_rates)\n\n# Aggregate data by state\nsymbols_data &lt;- map_data %&gt;%\n  group_by(region) %&gt;%\n  summarize(long = mean(long), lat = mean(lat), \n            symbols = first(symbols), uninsured_rates = first(uninsured_rates))\n\n# Plot the US map with state symbols and uninsured rates\nggplot() +\n  geom_polygon(data = us_map, aes(x = long, y = lat, group = group), \n               color = \"#1AFF1A\", fill = \"#F7EFB4\") +  # Add state polygons\n  geom_text(data = symbols_data, aes(x = long, y = lat, label = paste(symbols, \"\\n\", uninsured_rates,\"%\")), \n            size = 3, color = \"black\", fontface = \"bold\", hjust = 0.5) + \n  labs(title = \"Uninsured Rates Percentage by State in the US\")+# Add state symbols and uninsured rates as labels\n  coord_map() +                                  # Use a map projection\n  theme_void()                                   # Remove axis and background\n\n\n\n\nAbove is the Map plotted using ggplot where we merge the region in map data using left_join. The US Map shows the data of the Symbols of each state with their accurate boundaries with their percentage of Uninsured rates listed below.\nLet’s implement the same US Map using the plot_ly function to show more discrete data of each state. The plotly Library makes interactive, quality graphs. The Lowest and Highest Uninsured rates for each state are represented by the color coding ranging from Green as the Lowest to Red as the Highest.\n\nlibrary(tidyverse)\nlibrary(maps)\nlibrary(ggrepel)\nlibrary(dplyr)\nlibrary(plotly)\n\n\nAttaching package: 'plotly'\n\n\nThe following object is masked from 'package:ggplot2':\n\n    last_plot\n\n\nThe following object is masked from 'package:stats':\n\n    filter\n\n\nThe following object is masked from 'package:graphics':\n\n    layout\n\n# Define the data\ndata &lt;- read.csv(\"/Users/adhimohan/Desktop/STAT/Stat dataset pro.csv\", fileEncoding = \"ISO-8859-1\")\n\n# Get US map data with state names\nus_map &lt;- map_data(\"state\")\n\ndata &lt;- data %&gt;%\n  rename(region = state)\n\ndata &lt;- data %&gt;%\n  mutate(region = tolower(region))\n\n# Merge data with us_map by region\nmap_data &lt;- left_join(us_map, data, by = \"region\")\nmap_data$uninsured_rates &lt;- gsub(\"%\", \"\", map_data$uninsured_rates)\nmap_data$uninsured_rates &lt;- as.numeric(map_data$uninsured_rates)\n\n# Order symbols according to state column\nmap_data &lt;- map_data %&gt;% \n  arrange(region)\n\n# Create ggplot2 plot\ngg &lt;- ggplot(data = map_data, aes(x = long, y = lat, group = group, \n                                  fill = as.numeric(uninsured_rates), text = \n                                    paste(\"State: \", region, \"&lt;br&gt;Uninsured Rate: \", uninsured_rates,\n                                          \"%&lt;br&gt;Symbols: \", symbols))) +\n  geom_polygon(color = \"#FFFFFF\") +\n  geom_text_repel(data = map_data %&gt;% distinct(region, .keep_all = TRUE),\n                  aes(label = symbols), size = 3, color = \"#121D12\",\n                  box.padding = unit(0.35, \"lines\"), # Adjust padding\n                  point.padding = unit(0.5, \"lines\"), # Adjust padding\n                  segment.color = \"#FFFFFF\") + # Add segment color\n  scale_fill_gradient(name = \"Uninsured Rate (%)\", na.value = \"#55C555\",\n                      low = \"#1AFF1A\", high = \"#DC3220\", guide = \"legend\") +\n  labs(title = \"Uninsured Rates Percentage by State in the US\", \n       subtitle = \"Darker colors represent higher uninsured rates\") +\n  theme_minimal() +\n  theme(legend.position = \"right\")\n\n# Convert ggplot2 plot to plotly\nggplotly(gg, tooltip = \"text\")\n\nWarning in geom2trace.default(dots[[1L]][[1L]], dots[[2L]][[1L]], dots[[3L]][[1L]]): geom_GeomTextRepel() has yet to be implemented in plotly.\n  If you'd like to see this geom implemented,\n  Please open an issue with your example code at\n  https://github.com/ropensci/plotly/issues\n\n\n\n\n\n\nAbove is the Visualization of the US Map done using plot_ly. When the cursor is taken upon the any state, it gives the Name of the state, Symbol and the Uninsured rate. The Red color indicates the state with the highest Uninsured rate and Light Green color indicates the states with the lowest Uninsured rate.\nMapped data: Data visualization of Name of the State vs Percentage of Uninsured population using Bargraph.\n\nlibrary(tidyverse)\nlibrary(maps)\nlibrary(ggrepel)\nlibrary(dplyr)\nlibrary(plotly)\n\n# Define the data\ndata &lt;- read.csv(\"/Users/adhimohan/Desktop/STAT/Stat dataset pro.csv\", fileEncoding = \"ISO-8859-1\")\n\n# Convert uninsured_rates to numeric\ndata$uninsured_rates &lt;- as.numeric(gsub(\"%\", \"\", data$uninsured_rates))\n\n# Get US map data with state names\nus_map &lt;- map_data(\"state\")\n\ndata &lt;- data %&gt;%\n  rename(region = state)\n\ndata &lt;- data %&gt;%\n  mutate(region = tolower(region))\n\n# Reorder levels of region based on uninsured_rates\ndata$region &lt;- factor(data$region, levels = data$region[order(-data$uninsured_rates)])\n\n# Create the plot\np &lt;- ggplot(data, aes(x = uninsured_rates, y = region)) +\n  geom_col(fill = \"#FEFE62\", color = \"#E66100\") +  # Use geom_col instead of geom_bar\n  geom_text(aes(label = paste0(uninsured_rates, \"%\")), hjust = 1, nudge_x = -0.5,\n            size = 3, color = \"#1A85FF\") +  # Add % symbol to label\n  labs(title = \"Health Insurance Coverage in the US:\", \n       subtitle = \"Percentage of Population Without Health Insurance\",\n       x = \"Percentage of Uninsured Population\",\n       y = \"Name of the States\")\n\np\n\n\n\n\nAbove is the graph showing the data of Uninsured population against the states in an Ascending order. Each bar has its Uninsured rate(percentage) displayed at the end of the bar.\nMapped data: State Population vs Uninsured rates using a Bargraph.\n\nlibrary(ggplot2)\nlibrary(scales) # for comma formatting\n\n\nAttaching package: 'scales'\n\n\nThe following object is masked from 'package:purrr':\n\n    discard\n\n\nThe following object is masked from 'package:readr':\n\n    col_factor\n\n# Define the data\ndata &lt;- read.csv(\"/Users/adhimohan/Desktop/STAT/Stat dataset pro.csv\", fileEncoding = \"ISO-8859-1\")\n\n# Remove commas and convert state_population to numeric\ndata$state_population &lt;- as.numeric(gsub(\",\", \"\", data$state_population))\n\n# Order data by uninsured rates for stacked bar chart\ndata &lt;- data[order(data$uninsured_rates), ]\n\n# Create stacked bar chart\nggplot(data, aes(x = state, y = state_population, fill = uninsured_rates)) +\n  geom_bar(stat = \"identity\") +\n  scale_fill_gradient(low = \"green\", high = \"red\") +\n  scale_y_continuous(labels = comma) + # Format y-axis labels with commas\n  labs(title = \"Uninsured Rates vs. State Population\",\n       x = \"State\",\n       y = \"Population of the state\",\n       fill = \"Uninsured Rates\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))\n\n\n\n\nAbove is the graph showing the Population of the state plotted against its Uninsured rates. The Gradient color fill is as per the Uninsured rates. The Legend guide is added to the visualization where the Green represents the Lowest Uninsured rate and Red represents the Highest Uninsured rate. The height of the bar represents the population.\nMapped data: Total US Population vs Total Uninsured Population using a Histogram.\n\nlibrary(ggplot2)\n# Define the data\ndata &lt;- read.csv(\"/Users/adhimohan/Desktop/STAT/Stat dataset pro.csv\", fileEncoding = \"ISO-8859-1\")\n\n# Provided data\nstate_population &lt;- data$state_population\n\nuninsured_population &lt;- data$uninsured_population\n# Convert commas to empty string and then to numeric\nstate_population &lt;- as.numeric(gsub(\",\", \"\", state_population))\nuninsured_population &lt;- as.numeric(gsub(\",\", \"\", uninsured_population))\n\n# Calculate the sum of state_population and uninsured_population\nsum_state_population &lt;- sum(state_population)\nsum_uninsured_population &lt;- sum(uninsured_population)\n\n# Create a data frame for histogram\nhist_data &lt;- data.frame(Population = c(\"Uninsured Population\", \"Total US Population\"),\n                        Sum = c(sum_state_population, sum_uninsured_population))\n\n# Plot histogram\nggplot(hist_data, aes(x = Population, y = Sum, fill = Population)) +\n  geom_bar(stat = \"identity\", width = 0.5) + scale_y_continuous(labels = scales::comma) +\n  labs(title = \"Summation of State Population vs Uninsured Population\",\n       x = \"Population Type\",\n       y = \"Population\") +\n  scale_fill_manual(values = c(\"#1AFF1A\", \"#4B0092\")) +\n  theme_minimal()\n\n\n\n\nAbove is a Graph representing the Total US Population compared with the Total Uninsured Population in the US.\nMapped data: Top 10 states with Highest population of Uninsured rates using a Bar Graph.\n\n# Create a data frame with the given data\nstate_data &lt;- data.frame(\n  State = c(\"Texas\", \"Oklahoma\", \"Georgia\", \"Florida\", \"Mississippi\", \"Wyoming\", \"Alaska\", \"Nevada\", \"Arizona\", \"North Carolina\"),\n  Uninsured_Percentage = c(18.4, 14.3, 13.4, 13.2, 13, 12.3, 12.2, 11.4, 11.3, 11.3)\n)\n\n# Sort the data frame by Uninsured_Percentage\nstate_data &lt;- state_data[order(state_data$Uninsured_Percentage, decreasing = TRUE), ]\n\n# Create the bar plot\nbarplot(state_data$Uninsured_Percentage, names.arg = state_data$State, \n        col = \"#1A85FF\", ylim = c(0, 20),\n        xlab = \"\", ylab = \"Population Without Health Insurance (%)\",\n        main = \"Top 10 States With the Highest Percentage of Uninsured Americans\",\n        cex.names = 0.8, las = 2, border = NA)\n\n\n\n\nAbove is the graph representing the Top 10 states having the Highest Uninsured rates in the US. From which, Texas ranks first for Highest Uninsured Rates.\nAll the above colors used are Color Blind friendly.\nReference:\n[1] https://datacarpentry.org/R-genomics/04-dplyr.html#:~:text=Enter%20dplyr%20.,you%20access%20to%20more%20functions\n[2]https://howmuch.net/articles/health-insurance-coverage-in-the-us"
  }
]